syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "protos/infrastructure.proto";

option csharp_namespace = "Soit.Authentication.Protos";

package Soit.Authentication;


message CreateUserRequest {
  string name = 1;
  string cipher = 2;
  string legal_name = 3;
  string description = 4;
  string mobile = 5;
  string phone = 6;
  string email = 7;
  string photo = 8;
  Soit.Infrastructure.EntityStates state = 9;
  repeated int64 organization_ids = 10;
  repeated int64 role_ids = 11;
}

message FindUserReply {
  int64 id = 1;
  string name = 2;
  string cipher = 3;
  string legal_name = 4;
  string description = 5;
  string mobile = 6;
  string phone = 7;
  string email = 8;
  string photo = 9;
  Soit.Infrastructure.EntityStates state = 10;
  repeated Soit.Infrastructure.NamedIdentify organizations = 11;
  repeated Soit.Infrastructure.NamedIdentify roles = 12;
}

message QueryUserReply {
  Soit.Infrastructure.PageResult page_result = 1;
  repeated FindUserReply items = 2;
}

message QueryUserRequest {
  string contains = 1;
  Soit.Infrastructure.OrderRequest order_request = 2;
  Soit.Infrastructure.PageRequest page_request = 3;
}

message UpdatePasswordRequest {
  string old_cipher = 1;
  string new_cipher = 2;
}

message UpdateUserOrganizationsRequest {
  int64 id = 1;
  repeated int64 organization_ids = 2;
}

message UpdateUserRequest {
  int64 id = 1;
  string legal_name = 2;
  string description = 3;
  string mobile = 4;
  string phone = 5;
  string email = 6;
  string photo = 7;
  Soit.Infrastructure.EntityStates state = 8;
  repeated int64 organization_ids = 9;
  repeated int64 role_ids = 10;
}

message UpdateUserRolesRequest {
  int64 id = 1;
  repeated int64 role_ids = 2;
}

message UpdateUserStatesRequest {
  repeated int64 ids = 1;
  Soit.Infrastructure.EntityStates state = 2;
}

message AllowNameRequest {
  string name = 1;
}

service UserService {
  rpc Create(CreateUserRequest) returns (Soit.Infrastructure.Identify){
    option (google.api.http) = {
      put: "/users",
      body: "*"
    };
  }

  rpc Find(Soit.Infrastructure.Identify) returns (FindUserReply){
    option (google.api.http) = {
      get: "/users/{id}"
    };
  }

  rpc Query(QueryUserRequest) returns (QueryUserReply){
    option (google.api.http) = {
      post: "/users",
      body: "*"
    };
  }

  rpc Remove(Soit.Infrastructure.IdentifyArray) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/users",
      body: "*"
    };
  }

  rpc ResetPassword(Soit.Infrastructure.IdentifyArray) returns (google.protobuf.Empty){
    option (google.api.http) = {
      put: "/users/password",
      body: "*"
    };
  }

  rpc Update(UpdateUserRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/users/{id}",
      body: "*"
    };
  }

  rpc UpdateOrganizations(UpdateUserOrganizationsRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/users/{id}/organizations",
      body: "*"
    };
  }

  rpc UpdatePassword(UpdatePasswordRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/users/password",
      body: "*"
    };
  }

  rpc UpdateRoles(UpdateUserRolesRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/users/{id}/roles",
      body: "*"
    };
  }

  rpc UpdateStates(UpdateUserStatesRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/users/states",
      body: "*"
    };
  }

  rpc AllowName(AllowNameRequest) returns (google.protobuf.BoolValue){
    option (google.api.http) = {
      post: "/users/allowName",
      body: "*"
    };
  }
}
