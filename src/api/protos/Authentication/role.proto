syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "protos/infrastructure.proto";

option csharp_namespace = "Soit.Authentication.Protos";

package Soit.Authentication;

message ComponentTreeNode {
  int64 id = 1;
  string name = 2;
  string icon = 3;
  enum NodeTypes {
    MODULE = 0;
    PAGE = 1;
    ELEMENT = 2;
  }
  NodeTypes type = 4;
  string key = 5;
  int32 no = 6;
  string route = 7;
  bool show_in_menu = 8;
  repeated ComponentTreeNode children = 9;
  bool enabled = 10;
  google.protobuf.Int64Value parent_id = 11;
}

message CreateRoleRequest {
  string name = 1;
  string description = 2;
  Soit.Infrastructure.EntityStates state = 3;
}

message FindRoleReply {
  int64 id = 1;
  string name = 2;
  string description = 3;
  Soit.Infrastructure.EntityStates state = 4;

  message User {
    int64 id = 1;
    string name = 2;
    string legal_name = 3;
  }
  repeated User users = 5;
}

message GetRoleComponentTreeReply {
  repeated ComponentTreeNode nodes = 1;
}

message QueryRoleReply {
  Soit.Infrastructure.PageResult page_result = 1;
  repeated FindRoleReply items = 2;
}

message QueryRoleRequest {
  string contains = 1;
  Soit.Infrastructure.OrderRequest order_request = 2;
  Soit.Infrastructure.PageRequest page_request = 3;
}

message UpdateRoleComponentsRequest {
  int64 id = 1;
  repeated int64 module_ids = 2;
  repeated int64 page_ids = 3;
  repeated int64 element_ids = 4;
}

message UpdateRoleRequest {
  int64 id = 1;
  string name = 2;
  string description = 3;
  Soit.Infrastructure.EntityStates state = 4;
}

message UpdateRoleStatesRequest {
  repeated int64 ids = 1;
  Soit.Infrastructure.EntityStates state = 2;
}

message UpdateRoleUsersRequest {
  int64 id = 1;
  repeated int64 user_ids = 2;
}

service RoleService {
  rpc Create(CreateRoleRequest) returns (Soit.Infrastructure.Identify){
    option (google.api.http) = {
      put: "/roles",
      body: "*"
    };
  }

  rpc Find(Soit.Infrastructure.Identify) returns (FindRoleReply){
    option (google.api.http) = {
      get: "/roles/{id}"
    };
  }

  rpc GetComponentTree(Soit.Infrastructure.Identify) returns (GetRoleComponentTreeReply){
    option (google.api.http) = {
      get: "/roles/components"
    };
  }

  rpc Query(QueryRoleRequest) returns (QueryRoleReply){
    option (google.api.http) = {
      post: "/roles",
      body: "*"
    };
  }

  rpc Remove(Soit.Infrastructure.IdentifyArray) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/roles",
      body: "*"
    };
  }

  rpc Update(UpdateRoleRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/roles",
      body: "*"
    };
  }

  rpc UpdateComponents(UpdateRoleComponentsRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/roles/components",
      body: "*"
    };
  }

  rpc UpdateStates(UpdateRoleStatesRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/roles/states",
      body: "*"
    };
  }

  rpc UpdateUsers(UpdateRoleUsersRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/roles/users",
      body: "*"
    };
  }
}
